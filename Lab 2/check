#!/usr/bin/env python3
# =============================================================================
# =========================== ENVIRONMENT VARIABLES ===========================
# =============================================================================
REQUIRED_FILES = [
    "ex2q1.c",
    "ex2q2.c",
    "ex2q3.c",
]

Q1_INPUT = """\
4
3
2
9
4
"""

Q1_OUTPUT = """\
The maximum element is 9
"""

Q2_INPUT = """\
2234
"""

Q2_OUTPUT = """\
Enter CAD amount: Converted USD amount: $1676
$100 bills: 16
 $50 bills: 1
 $20 bills: 1
 $10 bills: 0
  $5 bills: 1
  $2 bills: 0
  $1 bills: 1
"""

Q3_INPUT = """\
79
23
3
"""

Q3_OUTPUT = """\
How many hardcover books are you buying? How many softcover books are you buying? How many ebooks are you buying? Order total: $983.96
"""


# =============================================================================
# ================================= FUNCTIONS =================================
# =============================================================================
import argparse
import os
import re
import tarfile
import tempfile
import shlex
import subprocess
from pathlib import Path
from subprocess import Popen, PIPE, DEVNULL


def is_valid_host():
    """Checks to make sure we're running on a 201 lab machine"""
    hostname = subprocess.run("hostname", capture_output=True)

    if hostname.returncode != 0:
        print("Unexpected error when looking for hostname")
        return False

    hostname = hostname.stdout.decode(encoding="UTF-8").strip()

    return re.fullmatch("ug[0-9]{2}", hostname) or "ohaton" == hostname


def check_required_files(d):
    for f in REQUIRED_FILES:
        p = Path(f"{d}/{f}")

        if not p.is_file():
            print(f"File {f} missing from submission")
            exit(1)


def compile(c, o):
    return (
        subprocess.run(shlex.split(f"gcc -Werror -Wall -std=c99 {c} -o {o}")).returncode
        == 0
    )


def compile_all_files(d):
    for i in range(1, 4):
        if not compile(f"{tmpdir}/ex2q{i}.c", f"{tmpdir}/ex2q{i}.out"):
            print(f"Failed to compile ex2q{i}.c!")
            exit(1)


def run_test(executable, in_str, out_str, returncode, name):
    ex = Popen(executable, stdin=PIPE, stdout=PIPE, stderr=DEVNULL)

    try:
        ex_stdout, errs = ex.communicate(in_str.encode("utf-8"), timeout=1)
    except subprocess.TimeoutExpired:
        print(
            f"{name} froze while running... it was killed. Make sure your program exits"
        )
        exit(1)

    if ex.returncode != returncode:
        print(f"{name} failed to return code {returncode} when expected")
        exit(1)
    elif ex_stdout.decode("utf-8") != out_str:
        print(f"Output for {name} doesn't match expected output")
        print(
            "Consider going back to the lab description and making sure your output matches the examples exactly"
        )
        exit(1)


# =============================================================================
# =================================== MAIN ====================================
# =============================================================================
parser = argparse.ArgumentParser(
    prog="201 Lab 2 checking script",
    description="Check the core essentials for lab 2. Get 50% if you pass!",
)

parser.add_argument(
    "submission_tar",
    type=Path,
    metavar="<TAR>",
    help="Path to your submit.tar for lab 2",
)

args = parser.parse_args()


# Make sure it's the lab machine ====
if not is_valid_host():
    print(
        "This script must be run on the undergraduate lab machines, ug01 through ug34"
    )
    exit(1)

# Open tar ====
with tempfile.TemporaryDirectory() as tmpdir:
    try:
        with tarfile.open(args.submission_tar, "r") as f:
            f.extractall(path=tmpdir)
    except tarfile.ReadError:
        print(f"Provided path `{args.submission_tar}` is not a readable tar file")
        exit(1)

    check_required_files(tmpdir)
    compile_all_files(tmpdir)

    run_test(f"{tmpdir}/ex2q1.out", Q1_INPUT, Q1_OUTPUT, 0, "ex2q1.c")
    run_test(f"{tmpdir}/ex2q2.out", Q2_INPUT, Q2_OUTPUT, 0, "ex2q2.c")
    run_test(f"{tmpdir}/ex2q3.out", Q3_INPUT, Q3_OUTPUT, 0, "ex2q3.c")

print("Nice, you passed! You'll get at least 50% for this lab mark.")
